#!/usr/bin/env bash
set -ex
SOURCE_DIR="$(cd "$(dirname "$0")/.." && pwd)"

which {gh,git,php,pre-commit} || exit 1

# Validate inputs
path="$1"
lang="$2"

if [[ -z "$path" || -z "$lang" ]]; then
  echo "Usage: $0 [git|path] [lang]";
  exit 1
fi

if [[ ! -d "$lang" ]]; then
	echo >&2 "The programming language '$lang' is not supported."
	exit 1
fi

source_dirs=(app src)

# Now clone the passed repo
is_repo=
if [[ "$path" = git@* ]]; then
  is_repo=1
  mkdir -p repo
  cd repo
  name=$(echo "${path#*/}" | cut -d. -f1)
  if [[ -d "$name" ]]; then
    cd "$name"
    git clean -fdx
    git fetch
    git pull origin main
  else
    git clone "$path" "$name"
    cd "$name"
  fi

  # Check that the destination branch is merged
  if git ls-remote --exit-code origin codestyle-update; then
    echo "The target branch is not merged. Please merge it first and rerun the script.";
    exit 1
  fi
else
  if [[ ! -d "$path" ]]; then
    echo 'The directory to the project '"$path"' does not exist'
    exit 1
  fi

  cd "$path"
fi

# Install common files for all languages first
cp -r "$SOURCE_DIR/common/." .

# Update files in repository
cp -r "$SOURCE_DIR/$lang/." .
case "$lang" in
	php)
		# Check required composer dependencies
		declare -A packages=(
			[vkcom/noverify]="^0.5"
			[squizlabs/php_codesniffer]="^3.7"
			[slevomat/coding-standard]="^8.5"
			[muvon/coding-standard]="dev-master"
		)

		pushd "$(pwd)"
		company_name="$(git remote get-url origin | cut -d: -f2 | cut -d/ -f1 | tr '[:upper:]' '[:lower:]')"
		project_name="${PWD##*/}"
		for dir in "${source_dirs[@]}"; do
			if test -d "$dir"; then
				cd "$dir"
				break
			fi
		done

		test ! -f composer.json && composer init --name="$company_name/$project_name" --type="project" --no-interaction
		composer config --no-interaction allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
		for package in "${!packages[@]}"; do
			if ! composer show --self | grep "$package"; then
				composer require --dev "$package":"${packages[$package]}"
			fi
		done
		popd
		;;
	react-ts)
		pushd "$(pwd)"
		# TODO: get rid of duplication from pre-commit-config
		npm i -D eslint@8.2.0 \
			prettier@2.7.1 \
    	"@babel/cli@7.16.0" \
    	"@babel/core@7.16.5" \
    	"@babel/eslint-parser@7.19.1" \
    	"@babel/runtime@7.16.5" \
    	eslint-config-airbnb@19.0.4 \
    	eslint-config-prettier@7.1.0 \
    	eslint-import-resolver-alias@1.1.2 \
    	eslint-plugin-import@2.26.0 \
    	eslint-plugin-jest@24.3.6 \
    	eslint-plugin-jsx-a11y@6.6.1 \
    	eslint-plugin-react@7.31.10 \
    	eslint-plugin-react-hooks@4.6.0 \
    	eslint-plugin-simple-import-sort@7.0.0 \
    	"@typescript-eslint/eslint-plugin@5.40.1" \
    	"@typescript-eslint/parser@5.40.1"

		# Run initial lints on all files
		node_modules/.bin/eslint --fix src/
		node_modules/.bin/prettier --write src/
		popd
		;;
	*)
		echo >&2 "There is no '$lang' support yet"
		exit 1
		;;
esac

branch="codestyle-update"
# Check if we have files updated and create the pull request
updated=
if test -d .git; then
  updated=$(git status -s)
fi

if [[ -n "$is_repo" && -n "$updated" ]]; then
  git add .
  if git branch -a | grep " ${branch}$"; then
    git branch -D "$branch"
  fi
  git checkout -b "$branch"
  git commit -m 'Update PHP codestyle to the latest version'
  git push origin codestyle-update
  gh pr create --title 'Update PHP codestyle' --body 'Update PHP codestyle to the latest version'
fi

# Install local hooks
pre-commit install

echo 'Done'
